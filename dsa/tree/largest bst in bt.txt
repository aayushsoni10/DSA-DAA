#include <bits/stdc++.h>

using namespace std;
struct node{
    int val;
    node* left;
    node* right;
};
int util(node * root,int &min1,int &max1,int &max_len,node* &lr){
    if(root==NULL)
        return 0;
    int a=INT_MAX,b=INT_MIN,c=INT_MAX,d=INT_MIN;
    int l=util(root->left,a,b,max_len,lr);
    int r=util(root->right,c,d,max_len,lr);
    if(l==-1 || r==-1)
        return -1;
    if(root->val<b || root->val>c)
        return -1;
    min1=min(root->val,a);
    max1=max(root->val,d);
    if(l+r+1>max_len)
    {
        max_len=l+r+1;
        lr=root;
    }
    return l+r+1;
}
int largest(node *root){
    int max_len=0;
    int min1,max1;
    node* lr;
    util(root,min1,max1,max_len,lr);
    printf("%d\n",lr->val);
    return max_len;
}
int main() {
	node* root=(node*) malloc(sizeof(node));
	root->val=5;
	root->left = (node*)malloc(sizeof(node));
	root->left->val=2;
	root->left->left = (node*)malloc(sizeof(node));
	root->left->left->val=1;
	root->left->left->left=NULL;
	root->left->left->right=NULL;
	root->left->right=(node*)malloc(sizeof(node));
	root->left->right->val=3;
	root->left->right->left=NULL;
	root->left->right->right=NULL;
	root->right = (node*)malloc(sizeof(node));
	root->right->val=7;
	root->right->right=NULL;
	root->right->left = (node*)malloc(sizeof(node));
	root->right->left->val=6;
	root->right->left->left=NULL;
	root->right->left->right=NULL;
	int ans=largest(root);
	printf("%d",ans);
	return 0;
}