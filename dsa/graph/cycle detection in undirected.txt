{
#include<bits/stdc++.h>
using namespace std;
class Graph
{
    int V;
    list<int> *adj;
public :
    Graph(int V);
    void addEdge(int v,int w);
    bool isCyclic();
};
vector<int> g[100001];
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
void Graph::addEdge(int v,int w)
{
    adj[v].push_back(w);
    adj[w].push_back(v);
}
int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        int _size,N;
        cin>>_size>>N;
        Graph *g = new Graph(_size);
        for(int i=0;i<N;i++)
        {
            int u,v;
            cin>>u>>v;
            g->addEdge(u,v);
        }
        cout<<g->isCyclic()<<endl;
    }
}

}

/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

/*The structure of the class is as follows 
which contains an integer V denoting the no 
of vertices and a list of adjacency vertices.
class Graph
{
    int V;
    list<int> *adj;
public :
    Graph(int V);
    void addEdge(int v,int w);
    bool isCyclic();
};*/
/*You are required to complete this method*/
int dfs_util(int s,vector<int> &vis,list<int> adj[],int p){
    vis[s]=1;
    int c=0;
    for(auto it=adj[s].begin();it!=adj[s].end();it++){
        if(*it !=p && vis[*it]==1){
            c=1;
            break;
        }
        if(!vis[*it]){
            int a=dfs_util(*it,vis,adj,s);
            if(a){
                c=1;
                break;
            }
        }
    }
    return c;
}
bool Graph :: isCyclic()
{
//Your code here
    vector<int> vis(V,0);
    int c=0;
    for(int i=0;i<V;i++){
        if(vis[i]==0){
            int a=dfs_util(i,vis,adj,-1);
            if(a){
                c=1;
                break;
            }
        }
    }
    return (bool)c;
}