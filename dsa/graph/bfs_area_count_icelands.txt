/*
	https://leetcode.com/problems/max-area-of-island/description/
*/
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> vis(n,vector<int> (m,0));
        vector<vector<int>> vis2(n,vector<int> (m,0));
        int max=0;
        int dx[]={-1,0,0,1};
        int dy[]={0,1,-1,0};
        int dx2[]={-1,-1,-1,0,0,1,1,1};
        int dy2[]={-1,0,1,1,-1,0,-1,1};
        int noofice=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis2[i][j] || grid[i][j]==0)
                    continue;
                noofice++;
                queue<pair<int,int>> q2;
                q2.push(make_pair(i,j));
                while(!q2.empty()){
                    int x=q2.front().first;
                    int y=q2.front().second;
                    q2.pop();
                    if(vis2[x][y])
                        continue;
                    vis2[x][y]=1;
                    for(int i1=0;i1<8;i1++){
                        int x1=x+dx2[i1];
                        int y1=y+dy2[i1];
                        if(valid(x1,y1,n,m) && !vis2[x1][y1] && grid[x1][y1]==1)
                            q2.push(make_pair(x1,y1));
                    }
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j] || grid[i][j]==0)
                    continue;
                int area=0;
                queue<pair<int,int>> q1;
                q1.push(make_pair(i,j));
                while(!q1.empty()){
                    int x=q1.front().first;
                    int y=q1.front().second;
                    q1.pop();
                    if(vis[x][y])
                        continue;
                    vis[x][y]=1;
                    area++;
                    for(int i1=0;i1<4;i1++){
                        int x1=x+dx[i1];
                        int y1=y+dy[i1];
                        if(valid(x1,y1,n,m) && !vis[x1][y1] && grid[x1][y1]==1)
                            q1.push(make_pair(x1,y1));
                    }
                }
                if(area>max)
                    max=area;
            }
        }
        printf("%d\n",noofice);
        return max;
    }
    int valid(int i,int j,int n,int m){
        if(i>=0 && i<n && j>=0 && j<m)
            return 1;
        return 0;
    }
};