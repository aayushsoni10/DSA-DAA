#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the shortestReach function below.
vector<int> shortestReach(int n, vector<unordered_map<int,int>> adj, int s) {
    //vector<vector<pair<int,int>>> adj(n);
    vector<int> ans;
    /*for(int i=0;i<(int)edges.size();i++){
        adj[edges[i][0]-1].push_back(make_pair(edges[i][1]-1,edges[i][2]));
        adj[edges[i][1]-1].push_back(make_pair(edges[i][0]-1,edges[i][2]));
    }*/
    vector<int> dis(n,1000000000);
    dis[s-1]=0;
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    pq.push(make_pair(0,s-1));
    unordered_map<int,int>::iterator it;
    while(!pq.empty()){
        int s1=pq.top().second;
        pq.pop();
        for(auto it=adj[s1].begin();it!=adj[s1].end();it++){
            if(dis[it->first]>dis[s1]+it->second){
                dis[it->first]=dis[s1]+it->second;
                pq.push(make_pair(dis[it->first],it->first));
            }
        }
    }
    for(int i=0;i<n;i++){
        if(i!=s-1){
            if(dis[i]!=1000000000)
                ans.push_back(dis[i]);
            else
                ans.push_back(-1);
        }
    }
    return ans;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string nm_temp;
        getline(cin, nm_temp);

        vector<string> nm = split_string(nm_temp);

        int n = stoi(nm[0]);

        int m = stoi(nm[1]);

        vector<unordered_map<int,int>> edges(n);
        unordered_map<int,int>::iterator it;
        for (int i = 0; i < m; i++) {
                int u,v,w;
                cin>>u>>v>>w;
                it=edges[u-1].find(v-1);
                if(it!=edges[u-1].end() && it->second>w)
                    edges[u-1][it->first]=w;
                else
                    edges[u-1].insert(make_pair(v-1,w));
                it=edges[v-1].find(u-1);
                if(it!=edges[v-1].end() && it->second>w)
                    edges[v-1][it->first]=w;
                else
                    edges[v-1].insert(make_pair(u-1,w));
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }

        int s;
        cin >> s;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        vector<int> result = shortestReach(n, edges, s);

        for (int i = 0; i < result.size(); i++) {
            fout << result[i];

            if (i != result.size() - 1) {
                fout << " ";
            }
        }

        fout << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}