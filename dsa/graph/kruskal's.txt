// C++ program for Kruskal's algorithm to find Minimum Spanning Tree
// of a given connected, undirected and weighted graph
#include <bits/stdc++.h>
using namespace std;
// a structure to represent a weighted edge in graph
struct Edge
{
	int src, dest, weight;
};

// a structure to represent a connected, undirected
// and weighted graph
struct Graph
{
	// V-> Number of vertices, E-> Number of edges
	int V, E;

	// graph is represented as an array of edges. 
	// Since the graph is undirected, the edge
	// from src to dest is also edge from dest
	// to src. Both are counted as 1 edge here.
	struct Edge* edge;
};

// Creates a graph with V vertices and E edges
struct Graph* createGraph(int V, int E)
{
	struct Graph* graph = new Graph;
	graph->V = V;
	graph->E = E;

	graph->edge = new Edge[E];

	return graph;
}

// A structure to represent a subset for union-find
struct subset
{
	int parent;
	int rank;
};

// A utility function to find set of an element i
// (uses path compression technique)
int find(struct subset subsets[], int i)
{
	// find root and make root as parent of i 
	// (path compression)
	if (subsets[i].parent != i)
		subsets[i].parent = find(subsets, subsets[i].parent);

	return subsets[i].parent;
}

// A function that does union of two sets of x and y
// (uses union by rank)
void Union(struct subset subsets[], int x, int y)
{
	int xroot = find(subsets, x);
	int yroot = find(subsets, y);

	// Attach smaller rank tree under root of high 
	// rank tree (Union by Rank)
	if (subsets[xroot].rank < subsets[yroot].rank)
		subsets[xroot].parent = yroot;
	else if (subsets[xroot].rank > subsets[yroot].rank)
		subsets[yroot].parent = xroot;

	// If ranks are same, then make one as root and 
	// increment its rank by one
	else
	{
		subsets[yroot].parent = xroot;
		subsets[xroot].rank++;
	}
}

void kMST(Graph* graph,vector<pair<int,pair<int,int>>> edges){
    int v=graph->V;
    int e=0;
    subset subsets[graph->V];
    for(int i=0;i<v;i++){
        subsets[i].parent=i;
        subsets[i].rank=0;
    }
    cout<<edges[0].first<<endl;
    sort(edges.begin(),edges.end());
    cout<<edges[0].first<<endl;
    int i=0;
    pair<int,pair<int,int>> result[v-1];
    while(e<v-1){
        int xp=find(subsets,edges[i].second.first);
        int yp=find(subsets,edges[i].second.second);
        i++;
        if(xp==yp)
            continue;
        Union(subsets,xp,yp);
        result[e++]=edges[i-1];
    }
    for(int i=0;i<e;i++){
        cout<<result[i].second.first<<"-"<<result[i].second.second<<" w "<<result[i].first<<endl;
    }
}
// Driver program to test above functions
int main()
{
	/* Let us create following weighted graph
			10
		0--------1
		| \	 |
	6| 5\ |15
		|	 \ |
		2--------3
			4	 */
	int V = 4; // Number of vertices in graph
	int E = 5; // Number of edges in graph
	struct Graph* graph = createGraph(V, E);
    vector<pair<int,pair<int,int>>> edges(E);

	// add edge 0-1
	graph->edge[0].src = 0;
	graph->edge[0].dest = 1;
	graph->edge[0].weight = 10;
	edges[0]=make_pair(10,pair<int,int>(0,1));

	// add edge 0-2
	graph->edge[1].src = 0;
	graph->edge[1].dest = 2;
	graph->edge[1].weight = 6;
	edges[1]=make_pair(6,pair<int,int>(0,2));

	// add edge 0-3
	graph->edge[2].src = 0;
	graph->edge[2].dest = 3;
	graph->edge[2].weight = 5;
	edges[2]=make_pair(5,pair<int,int>(0,3));

	// add edge 1-3
	graph->edge[3].src = 1;
	graph->edge[3].dest = 3;
	graph->edge[3].weight = 15;
	edges[3]=make_pair(15,pair<int,int>(1,3));

	// add edge 2-3
	graph->edge[4].src = 2;
	graph->edge[4].dest = 3;
	graph->edge[4].weight = 4;
	edges[4]=make_pair(4,pair<int,int>(2,3));

	kMST(graph,edges);

	return 0;
}