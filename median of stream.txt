int getmin(int val,priority_queue<int> &left,priority_queue<int,vector<int>,greater<int>> &right,int m){
    if(right.size()==left.size()){
        if(val<m){
            left.push(val);
            m=left.top();
        }else{
            right.push(val);
            m=right.top();
        }
    }else if (right.size()>left.size()){
        if(val<m){
            left.push(val);
        }else{
            left.push(right.top());
            right.pop();
            right.push(val);
        }
        m=(left.top()+right.top())/2;
    }else{
        if(val>m){
            right.push(val);
        }else{
            right.push(left.top());
            left.pop();
            left.push(val);
        }
        m=(left.top()+right.top())/2;
    }
    return m;
}
void printM(int a[],int n){
    int m=0;
    priority_queue<int> left;
    priority_queue<int,std::vector<int>,greater<int>> right;
    for(int i=0;i<n;i++){
        int m=getmin(a[i],left,right,m);
        cout<<m<<endl;
    }
}
// Driver code 
int main() 
{ 
	int A[] = {5, 15, 1, 3, 2, 8, 7, 9, 10, 6, 11, 4}; 
	int size = ARRAY_SIZE(A); 

	// In lieu of A, we can also use data read from a stream 
	printMedian(A, size); 

	return 0; 
} 