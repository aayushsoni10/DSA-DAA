/*Write an efficient algorithm that searches for a value in an m x n matrix.

This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than or equal to the last integer of the previous row.
Example:

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return 1 ( 1 corresponds to true )

Return 0 / 1 ( 0 if the element is not present, 1 if the element is present ) for this problem*/

int Solution::searchMatrix(vector<vector<int> > &A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int n=A.size(), m=A[0].size();
    if(A[0][0]>B || A[n-1][m-1]<B)
        return 0;
    int s=0, e=n-1;
    while(s<e){
        int s1=s, e1=e;
        int k=(s+e)/2;
        if(A[k][0]<B){
            s=k;
        }else{
            e=k;
        }
        if(s1==s && e1==e)
            break;
    }
    int row;
    if(A[e][0]<=B)
        row=e;
    else
        row=s;
    s=0, e=A[0].size()-1;
    while(s<e){
        int k=(s+e)/2;
        int s1=s, e1=e;
        if(A[row][k]<B)
            s=k;
        else
            e=k;
        if(s1==s && e1==e)
            break;
    }
    if(A[row][s]==B || A[row][e]==B)
        return 1;
    return 0;
}