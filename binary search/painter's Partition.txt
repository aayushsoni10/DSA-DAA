/*You have to paint N boards of length {A0, A1, A2, A3 … AN-1}. There are K painters available and you are also given how much time a painter takes to paint 1 unit of board. You have to get this job done as soon as possible under the constraints that any painter will only paint contiguous sections of board.

2 painters cannot share a board to paint. That is to say, a board
cannot be painted partially by one painter, and partially by another.
A painter will only paint contiguous boards. Which means a
configuration where painter 1 paints board 1 and 3 but not 2 is
invalid.
Return the ans % 10000003

Input :
K : Number of painters
T : Time taken by painter to paint 1 unit of board
L : A List which will represent length of each board

Output:
     return minimum time to paint all boards % 10000003
*/
int valid(int val,int np,vector<int> &C){
    int count=0;
    int sum=0;
    for(int i=0;i<C.size();i++){
        if(C[i]>val)
            return 0;
        if(count>=np)
            return 0;
        if(sum+C[i]<=val){
            sum=sum+C[i];
        }else{
            count++;
            sum=0;
            i--;
        }
    }
    return 1;
}
int Solution::paint(int A, int B, vector<int> &C) {
    long x=0;
    for(int i=0;i<C.size();i++)
        x+=C[i];
    long s=0;
    long e=x;
    while(s<e){
        long mid=(s+e)/2;
        if(valid(mid,A,C)){
            e=mid-1;
        }
        else{
            s=mid+1;
        }
    }
    if(valid(s,A,C))
        return s*B%10000003;
    return (s+1)*B%10000003;
}